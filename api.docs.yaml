openapi: 3.0.0
info:
  title: Income Tracker API
  version: 1.0.0
  description: API pour gérer l'authentification et les revenus des utilisateurs.
servers:
  - url: http://localhost:8080/api

paths:
  /auth/sign:
    post:
      summary: Créer un compte utilisateur
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  example: testtest@gmail.com
                password:
                  type: string
                  example: "1234"
      responses:
        "201":
          description: Utilisateur créé avec succès
        "400":
          description: Requête invalide

  /auth/login:
    post:
      summary: Connexion d'un utilisateur
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  example: testtest@gmail.com
                password:
                  type: string
                  example: "1234"
      responses:
        "200":
          description: Authentification réussie (retourne un token JWT)
        "401":
          description: Identifiants invalides

  /income:
    post:
      summary: Créer un revenu
      security:
        - bearerAuth: []
      tags:
        - Income
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [amount, date, source]
              properties:
                amount:
                  type: number
                  example: 1500
                date:
                  type: string
                  format: date
                  example: 2025-08-19
                source:
                  type: string
                  example: Freelance
                description:
                  type: string
                  example: Projet X
      responses:
        "201":
          description: Revenu créé avec succès
        "401":
          description: Non autorisé

    get:
      summary: Lister tous les revenus de l’utilisateur
      security:
        - bearerAuth: []
      tags:
        - Income
      responses:
        "200":
          description: Liste des revenus
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Income"
        "401":
          description: Non autorisé

  /income/{id}:
    get:
      summary: Obtenir un revenu par ID
      security:
        - bearerAuth: []
      tags:
        - Income
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Revenu trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Income"
        "404":
          description: Revenu non trouvé

    put:
      summary: Mettre à jour un revenu
      security:
        - bearerAuth: []
      tags:
        - Income
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  example: 2000
                description:
                  type: string
                  example: Projet X mis à jour
      responses:
        "200":
          description: Revenu mis à jour
        "404":
          description: Revenu non trouvé

    delete:
      summary: Supprimer un revenu
      security:
        - bearerAuth: []
      tags:
        - Income
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Revenu supprimé avec succès
        "404":
          description: Revenu non trouvé

  /expenses:
    post:
      summary: Créer une dépense
      security:
        - bearerAuth: []
      tags:
        - Expense
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: "Loyer"
                amount:
                  type: number
                  example: 800
                expense_date:
                  type: string
                  format: date
                  example: "2025-08-20"
                category_name:
                  type: string
                  example: "Nourriture"
                receipt_image:
                  type: string
                  format: binary
                is_recurrent:
                  type: boolean
                  example: true
                start_date:
                  type: string
                  format: date
                  example: "2025-08-20"
                end_date:
                  type: string
                  format: date
                  example: "2027-04-01"
            encoding:
              receipt_image:
                contentType: image/png, image/jpg, image/jpeg, application/pdf

      responses:
        "201":
          description: La dépense créée
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Expense"
        "400":
          description: Erreur dans la requete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: Erreur lors du traitement de la requete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    get:
      summary: Obtenir toutes les dépenses
      security:
        - bearerAuth: []
      tags:
        - Expense
      parameters:
        - name: start
          in: query
          description: Date minimale de l'effectuation des depenses
          schema:
            type: string
            format: date
        - name: end
          in: query
          description: Date maximale de l'effectuation des depenses
          schema:
            type: string
            format: date
        - name: category
          in: query
          description: La catégorie de la dépense
          schema:
            type: string
        - name: is_recurrent
          in: query
          description: Si la dépense est récurrente
          schema:
            type: boolean
      responses:
        "200":
          description: Une liste de dépenses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Expense"
        "400":
          description: Erreur dans la requete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: Erreur lors du traitement de la requete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

  "/expenses/{id}":
    get:
      summary: Obtenir une dépense par ID
      security:
        - bearerAuth: []
      tags:
        - Expense
      parameters:
        - name: id
          in: path
          required: true
          description: L'ID de la dépense
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Une dépense
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Expense"
        "404":
          description: Dépense non trouvée
          content:
            application/json:
              schema:
                type: object
                example: { message: No such expense }
        "400":
          description: Erreur dans la requete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: Erreur lors du traitement de la requete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    put:
      summary: Mettre à jour une dépense
      security:
        - bearerAuth: []
      tags:
        - Expense
      parameters:
        - name: id
          in: path
          required: true
          description: L'ID de la dépense
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: "Loyer"
                amount:
                  type: number
                  example: 800
                expense_date:
                  type: string
                  format: date
                  example: "2025-08-20"
                category_name:
                  type: string
                  example: "Logement"
                receipt_image:
                  type: string
                  format: binary
                is_recurrent:
                  type: boolean
                  example: true
                start_date:
                  type: string
                  format: date
                  example: "2025-08-20"
                end_date:
                  type: string
                  format: date
                  example: "2027-04-01"
            encoding:
              receipt_image:
                contentType: image/png, image/jpg, image/jpeg, application/pdf

      responses:
        "200":
          description: La dépense mise à jour
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Expense"

        "404":
          description: Dépense non trouvée
          content:
            application/json:
              schema:
                type: object
                example: { message: No match found }
        "400":
          description: Erreur dans la requete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: Erreur lors du traitement de la requete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    delete:
      summary: Supprimer une dépense
      security:
        - bearerAuth: []
      tags:
        - Expense
      parameters:
        - name: id
          in: path
          required: true
          description: L'ID de la dépense
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Dépense supprimée
          content:
            application/json:
              schema:
                type: object
                example: { message: Deletion successful }
        "404":
          description: Dépense non trouvée
          content:
            application/json:
              schema:
                type: object
                example: { message: No expense with such ID }
        "400":
          description: Erreur dans la requete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: Erreur lors du traitement de la requete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

  /categories:
    get:
      tags:
        - Categories
      summary: Récupérer toutes les catégories
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Une liste de catégories.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
        "500":
          description: Erreur interne du serveur.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    post:
      tags:
        - Categories
      summary: Créer une nouvelle catégorie
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Nourriture"
      responses:
        "201":
          description: La catégorie a été créée avec succès.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          description: Erreur dans la requete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "500":
          description: Erreur interne du serveur.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

  /categories/{id}:
    put:
      tags:
        - Categories
      summary: Mettre à jour une catégorie
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: L'ID de la catégorie à mettre à jour.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Transport"
      responses:
        "200":
          description: La catégorie a été mise à jour avec succès.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          description: Erreur dans la requete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "404":
          description: La catégorie n'a pas été trouvée.
          content:
            application/json:
              schema:
                type: object
                example: { message: No category with such ID }
        "500":
          description: Erreur interne du serveur.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    delete:
      tags:
        - Categories
      summary: Supprimer une catégorie
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: L'ID de la catégorie à supprimer.
        - in: query
          name: force
          required: false
          schema:
            type: boolean
          description: Ignoree si la categorie est encore utilisée
      responses:
        "204":
          description: La catégorie a été supprimée avec succès.
          content:
            application/json:
              schema:
                type: object
                example: { message: Deletion successful }
        "400":
          description: Erreur dans la requete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        "404":
          description: La catégorie n'a pas été trouvée.
          content:
            application/json:
              schema:
                type: object
                example: { message: No category with such ID }
        "500":
          description: Erreur interne du serveur.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Income:
      type: object
      properties:
        id:
          type: integer
          example: 3
        amount:
          type: number
          example: 1500
        date:
          type: string
          format: date
          example: 2025-08-19
        source:
          type: string
          example: Freelance
        description:
          type: string
          example: Projet X
    Expense:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        description:
          type: string
          example: "Loyer"
        amount:
          type: number
          example: 800
        expense_date:
          type: string
          format: date
          example: "2025-08-20"
        category_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        receipt_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174001"
        is_recurrent:
          type: boolean
          example: true
        start_date:
          type: string
          format: date
          example: "2025-08-20T12:30:00Z"
        end_date:
          type: string
          format: date
          example: "2027-04-01T12:30:00Z"
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174001"
        name:
          type: string
          example: "Nourriture"
        is_default:
          type: boolean
        created_at:
          type: string
          format: date
          example: "2025-08-20T12:30:00Z"
        user_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174001"
    ErrorMessage:
      properties:
        message:
          type: string
        error:
          type: string
